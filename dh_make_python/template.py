import os
import tempfile
import shutil

from copy import copy

class Template(object):
    _tpl = []
    #{{{def __init__(self, debinfo):
    def __init__(self, debinfo):
        self.tpl = copy(self._tpl)
        self.debinfo = debinfo
        self.fname = self.__class__.__name__.lower()
    #}}}

    #{{{def __str__(self):
    def __str__(self):
        return '\n'.join(self.tpl)% self.debinfo.__dict__
    #}}}

    #{{{def save(self, _dir):
    def save(self, _dir):
        fullpath = os.path.join(_dir,self.__class__.__name__.lower())
        with open(fullpath, 'w') as f:
            f.write("%s"%self)
    #}}}
pass

class Changelog(Template):

    """
    Debian Changelog File Template
    """

    _tpl = ['%(debname)s (%(debver)s) unstable; urgency=low',
           '',
           '  * Initial release (Closes: #XXXXX)',
           '',
           ' -- %(maintainer_fullname)s  %(today822)s',
           '']
pass

class Control(Template):

    """
    Debian Control File Template
    """
    _tpl = ['Source: %(source)s',
        'Maintainer: %(maintainer_fullname)s',
        '%(uploaders)sSection: %(debian_section)s',
        'Priority: optional',
        'Build-Depends: %(build_depends)s',
        'Standards-Version: 3.9.1',
        '%(source_stanza_extras)s',
        'Package: %(debname)s',
        'Architecture: %(architecture)s',
        'Depends: %(depends)s',
        '%(package_stanza_extras)sDescription: %(description)s',
        '%(long_description)s']
pass

class Copyright(Template):

    """
    Debian Copyright File Template (Machine Readable Formate)
    """
    _tpl = [
        'Format: http://svn.debian.org/wsvn/dep/web/deps/dep5.mdwn?op=file&rev=166',
        'Upstream-Name: %(upstream_name)s',
        'Upstream-Contact: %(upstream_contact_fullname)s',
        'Source: %(homepage)s']

    #{{{def __init__(self, debinfo):
    def __init__(self, debinfo):
        super(Copyright, self).__init__(debinfo)
        self.addCopyrightEntry('*', debinfo.upstream_contact_fullname,
                                     debinfo.upstream_license)
        self.addCopyrightEntry('debian/*', debinfo.maintainer_fullname,
                                    debinfo.upstream_license)
    #}}}

    #{{{def addCopyrightEntry(self, fpath, fullname, license):
    def addCopyrightEntry(self, fpath, fullname, license):
        entry = [
            '',
            'Files: %s'%fpath,
            'Copyright: <year> %s'%fullname,
            'License: %s'% license
        ]
        self.tpl.extend(entry)
    #}}}
pass

class Rules(Template):
    _tpl = ['#!/usr/bin/make -f',
        ''
        '# This file was automatically generated by dh_make_python at',
        '# %(today822)s',
        '',
        '%%:',
        '\tdh $@',
        '']
pass

class DebianizeDir(object):

    #{{{def __init__(self, debinfo):
    def __init__(self, debinfo):
        self.debinfo = debinfo
        self.tpls = {}
        # debian/copyright
        self.tpls['copyright'] = Copyright(self.debinfo)
        # debian/changelog
        self.tpls['changelog'] = Changelog(self.debinfo)
        # debian/control
        self.tpls['control'] = Control(self.debinfo)
        # debian/rules
        self.tpls['rules'] = Rules(self.debinfo)
    #}}}

    #{{{def create(self):
    def create(self):
        self.tmppath = tempfile.mkdtemp()
        # create debian/ directory and contents
        for tpl in self.tpls.values():
            #@TODO raise err if target is exists
            tpl.save(self.tmppath)

        # debian/source/format
        _dir = os.path.join(self.tmppath, 'source')
        os.mkdir(_dir)
        self._write(os.path.join(_dir,'format'), '3.0 (quilt)')

        # debian/compat
        self._write('compat', '7\n')
        return self.tmppath
    #}}}

    #{{{def save(self, dest='debian'):
    def save(self, dest='debian'):
        self.create()
        if not os.path.exists(dest):
            shutil.move(self.tmppath, dest)
        else:
            print "debian direcotry exists"
    #}}}

    #{{{def _write(self, fname, content):
    def _write(self, fname, content):
        with open(os.path.join(self.tmppath, fname), 'w') as f:
            f.write(content)
    #}}}
pass
